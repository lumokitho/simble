{
  "version": 3,
  "file": "simble.js",
  "sourceRoot": "",
  "sources": [
    "simble.coffee"
  ],
  "names": [],
  "mappings": "AAAA;AAAA,IAAA,cAAA,EAAA,YAAA,EAAA,UAAA,EAAA,OAAA,EAAA,cAAA,EAAA,0BAAA,EAAA,oBAAA,EAAA,wBAAA,EAAA,2BAAA,EAAA,uBAAA,EAAA,wBAAA,EAAA,iBAAA,EAAA,qBAAA,EAAA,iBAAA,EAAA,sBAAA,EAAA,UAAA,EAAA,WAAA,EAAA,mBAAA,EAAA,kBAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,mCAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,UAAA,EAAA,cAAA,EAAA,WAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,mBAAA,EAAA,iBAAA,EAAA,aAAA,EAAA,kBAAA;EAAA,oBAAA;;;AAGA,uBAAA,GAA0B,QAAA,CAAC,UAAD,CAAA;SACzB,UAAU,CAAC,OAAX,CAAmB,eAAnB,EAAoC,EAApC,CAAuC,CAAC,WAAxC,CAAA;AADyB,EAH1B;;;AAOA,iBAAA,GAAoB,QAAA,CAAC,IAAD,CAAA;AACnB,MAAA;EAAA,GAAA,GAAM,uBAAA,CAAwB,IAAxB;SACN,CAAA,CAAA,CAAG,GAAI,YAAP,CAAc,CAAd,CAAA,CAAiB,GAAI,aAArB,CAA6B,CAA7B,CAAA,CAAgC,GAAI,cAApC,CAA6C,CAA7C,CAAA,CAAgD,GAAI,cAApD,CAA6D,CAA7D,CAAA,CAAgE,GAAI,cAApE,CAAA;AAFmB,EAPpB;;;AAYA,2BAAA,GAA8B,QAAA,CAAC,IAAD,CAAA;EAC7B,IAAI,OAAO,IAAP,KAAgB,QAApB;IACC,IAAA,GAAO,IAAI,CAAC,QAAL,CAAc,IAAd,EADR;;EAEA,IAAA,GAAO,uBAAA,CAAwB,IAAxB;EACP,IAAI,IAAI,CAAC,MAAL,GAAc,CAAlB;IACC,IAAA,GAAO,CAAC,UAAA,GAAa,IAAd,CAAmB,CAAC,KAApB,CAA0B,CAAC,CAA3B,EADR;;EAEA,IAAI,IAAI,CAAC,MAAL,KAAe,CAAnB;IACC,IAAA,IAAQ,uBADT;;SAEA,iBAAA,CAAkB,IAAlB;AAR6B,EAZ9B;;;AAuBA,iBAAA,GAAoB,QAAA,CAAC,QAAD,EAAW,YAAX,CAAA;AACnB,MAAA,CAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA;AAA+C;EAAA,KAAa,0HAAb;iBAA9C,QAAQ,CAAC,KAAT,CAAe,KAAf,EAAuB,KAAA,GAAQ,YAA/B;EAA8C,CAAA;;AAD5B,EAvBpB;;;AA2BA,wBAAA,GAA2B,QAAA,CAAC,WAAD,CAAA;SAC1B,iBAAA,CAAkB,uBAAA,CAAwB,WAAxB,CAAlB,EAAwD,CAAxD,CAA0D,CAAC,IAA3D,CAAgE,GAAhE;AAD0B,EA3B3B;;;AA+BA,cAAA,GAAiB,QAAA,CAAC,OAAD,CAAA;EAChB,OAAA,GAAU,wBAAA,CAAyB,OAAzB;SACV,QAAA,CAAC,UAAD,CAAA;WACE,UAAU,CAAC,OAAX,KAAsB;EADxB;AAFgB,EA/BjB;;;AAqCA,QAAA,GAAW,QAAA,CAAC,KAAD,CAAA;SACV,KAAK,CAAC,OAAN,CAAc,KAAd;AADU,EArCX;;;AAyCA,0BAAA,GAA6B,QAAA,CAAC,WAAD,CAAA;AAC5B,MAAA;EAAA,IAAG,CAAI,QAAA,CAAS,WAAT,CAAP;IACC,WAAA,GAAc,CAAC,WAAD,EADf;;EAEA,aAAA,GAAgB,WAAW,CAAC,GAAZ,CAAgB,2BAAhB;SAChB,QAAA,CAAC,UAAD,CAAA;AACC,QAAA,CAAA,EAAA,GAAA,EAAA;IAAA,KAAA,+CAAA;;MACC,IAAI,CAAI,CAAC,aAAgB,UAAU,CAAC,aAAa,CAAC,aAAzC,EAAA,YAAA,MAAD,CAAR;AACC,eAAO,MADR;;IADD;WAGA;EAJD;AAJ4B,EAzC7B;;;AAoDA,WAAA,GAAc,QAAA,CAAC,IAAD,CAAA;SACb,QAAA,CAAC,UAAD,CAAA;WACE,UAAU,CAAC,aAAa,CAAC,IAAzB,KAAiC;EADnC;AADa,EApDd;;;AAyDA,YAAA,GACC;EAAA,OAAA,EAAS,cAAT;EACA,IAAA,EAAM,WADN;EAEA,OAAA,EAAS,0BAFT;EAGA,QAAA,EAAU;AAHV,EA1DD;;;AAgEA,UAAA,GAAa,QAAA,CAAC,WAAD,CAAA;SACZ,QAAA,CAAC,KAAD,CAAA;WACE,OAAO,KAAP,KAAiB;EADnB;AADY,EAhEb;;;AAqEA,gBAAA,GAAmB,UAAA,CAAW,UAAX,EArEnB;;;AAwEA,cAAA,GAAiB,QAAA,CAAC,KAAD,CAAA;SACf,CAAI,CAAC,CAAC,KAAA,KAAS,MAAV,CAAA,IAAwB,CAAC,KAAA,KAAS,IAAV,CAAzB;AADW,EAxEjB;;;AA4EA,sBAAA,GAAyB,QAAA,CAAC,OAAD,CAAA;AACxB,MAAA,WAAA,EAAA,YAAA,EAAA;EAAA,IAAG,gBAAA,CAAiB,OAAjB,CAAH;AAAkC,WAAO,QAAzC;;EACA,WAAA,GAAc;EACd,KAAA,sBAAA;;IACC,IAAG,cAAA,CAAe,YAAf,CAAH;MACC,WAAW,CAAC,IAAZ,CAAiB,YAAa,CAAA,WAAA,CAAb,CAA0B,YAA1B,CAAjB,EADD;;EADD;SAGA,QAAA,CAAC,UAAD,CAAA;AACC,QAAA,CAAA,EAAA,GAAA,EAAA;IAAA,KAAA,6CAAA;;MACC,IAAI,CAAI,UAAA,CAAW,UAAX,CAAR;AACC,eAAO,MADR;;IADD;WAGA;EAJD;AANwB,EA5EzB;;;AAyFA,KAAA,GAAQ,OAAA,CAAQ,OAAR,EAzFR;;;AA4FA,kBAAA,GAAqB,QAAA,CAAC,kBAAD,CAAA;SACpB,IAAI,OAAJ,CAAY,QAAA,CAAC,OAAD,EAAU,MAAV,CAAA;IACX,IAAI,KAAK,CAAC,KAAN,KAAe,kBAAnB;MACC,OAAA,CAAA,EADD;KAAA,MAAA;MAGC,KAAK,CAAC,EAAN,CAAS,aAAT,EAAwB,QAAA,CAAC,KAAD,CAAA;QACvB,IAAI,KAAA,KAAS,kBAAb;UACC,OAAA,CAAA,EADD;;MADuB,CAAxB,EAHD;;EADW,CAAZ;AADoB,EA5FrB;;;AAwGA,oBAAA,GAAuB,QAAA,CAAC,MAAD,CAAA;EACtB,IAAI,CAAI,cAAA,CAAe,MAAf,CAAR;AAAqC,WAAO,KAA5C;;SACA,CAAC,GAAA,MAAD;AAFsB,EAxGvB;;;AA6GA,WAAA,GAAc,OAAA,CAAQ,OAAR,CAAA,CAAiB,cAAjB,EA7Gd;;;AAgHA,YAAA,GAAe,OAAA,CAAQ,QAAR,EAhHf;;;AAmHA,iBAAA,GAAoB,QAAA,CAAA,GAAC,MAAD,CAAA;AACnB,MAAA,CAAA,EAAA,GAAA,EAAA;EAAA,KAAA,wCAAA;;IACC,IAAG,cAAA,CAAe,KAAf,CAAH;AACC,aAAO,MADR;;EADD;AADmB,EAnHpB;;;AA0HA,oBAAA,GAAuB,QAAA,CAAA,CAAA;SACtB,IAAI,CAAC,GAAL,CAAA;AADsB,EA1HvB;;;AA8HA,iBAAA,GACC;EAAA,YAAA,EAAc,CAAd;EACA,SAAA,EAAW,CADX;EAEA,UAAA,EAAY;AAFZ,EA/HD;;;AAoIA,mCAAA,GAAsC,QAAA,CAAC,OAAD,EAAU,gBAAV,CAAA;SACrC,CAAC,GAAG,CAAC,MAAJ,CAAW,gBAAX,CAAA,GAA+B,OAAO,CAAC,QAAR,CAAiB,IAAjB,CAAhC,CAAuD,CAAC,KAAxD,CAA8D,CAAC,gBAA/D;AADqC,EApItC;;;AAwIA,wBAAA,GAA2B,QAAA,CAAC,UAAD,EAAa,gBAAb,EAA+B,aAA/B,EAA8C,aAA9C,CAAA;AAC1B,MAAA;EAAA,gBAAA,GAAmB,iBAAA,CAAkB,gBAAlB,EAAoC,GAApC;EACnB,aAAA,GAAgB,iBAAA,CAAkB,aAAlB,EAAiC,EAAjC;EAChB,aAAA,GAAgB,iBAAA,CAAkB,aAAlB,EAAiC,EAAjC;SAChB;;AAAmF;IAAA,KAAA,4CAAA;;mBAAlF,CAAA,CAAA,CAAG,aAAH,CAAA,CAAA,CAAmB,mCAAA,CAAoC,IAApC,EAA0C,CAA1C,CAAnB,CAAA,CAAA,CAAkE,aAAlE,CAAA;IAAkF,CAAA;;MAAnF,CAA0G,CAAC,IAA3G,CAAgH,gBAAhH;AAJ0B,EAxI3B;;;AA+IA,iBAAA,GAAoB,QAAA,CAAC,KAAD,CAAA;EACnB,IAAG,CAAI,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAP;IACC,KAAA,GAAQ,MAAM,CAAC,IAAP,CAAY,KAAZ,EADT;;SAEA;AAHmB,EA/IpB;;;AAqJA,UAAA,GAAa,OAAA,CAAQ,OAAR,CAAA,CAAiB,aAAjB,EArJb;;;AAwJA,cAAA,GAAiB,MAAA,QAAc,aAAd,CAAA;;EAGhB,WAAa,CAAC,oBAAD,UAAA,CAAA;;IAAuB,IAAC,CAAA;IAEpC,IAAC,CAAA,UAAD,GAAc,IAAC,CAAA,OAAO,CAAC;IACvB,IAAC,CAAA,wBAAD,CAA0B,oBAA1B;AACA;EAJY,CAAb;;;EAOA,wBAA0B,CAAC,oBAAD,CAAA;IACzB,IAAI,oBAAA,KAA0B,IAAC,CAAA,oBAA/B;MACC,IAAC,CAAA,oBAAD,GAAwB;MACxB,IAAC,CAAA,IAAD,GAAQ,2BAAA,CAA4B,IAAC,CAAA,oBAAoB,CAAC,IAAlD;MACR,IAAC,CAAA,oBAAoB,CAAC,EAAtB,CAAyB,MAAzB,EAAiC,CAAC,IAAD,CAAA,GAAA;QAChC,IAAA,GAAO,oBAAA,CAAqB,IAArB;QACP,IAAC,CAAA,UAAU,CAAC,uBAAZ,CAAA;QACA,UAAA,CAAW,CAAA,eAAA,CAAA,CAAkB,IAAC,CAAA,IAAnB,CAAwB,YAAxB,CAAA,CAAuC,wBAAA,CAAyB,IAAzB,EAA+B,GAA/B,CAAvC,CAA2E,CAA3E,CAAX;QACA,IAAC,CAAA,IAAD,CAAM,eAAN,EAAuB,IAAvB;MAJgC,CAAjC,EAHD;;WASA;EAVyB,CAP1B;;;EAoBA,IAAM,CAAC,QAAD,CAAA;IACL,WAAA,CAAY,CAAA,eAAA,CAAA,CAAkB,IAAC,CAAA,IAAnB,CAAwB,UAAxB,CAAA,CAAqC,QAArC,CAA8C,CAA9C,CAAZ;gBADD,CAAA,IAEC,CAAM,GAAA,SAAN;EAFK,CApBN;;;EAyBA,iBAAmB,CAAA,CAAA;WAClB,IAAC,CAAA,OAAO,CAAC,iBAAT,CAAA,CACA,CAAC,IADD,CACM,CAAA,CAAA,GAAA;aACL;IADK,CADN;EADkB,CAzBnB;;;EA+BA,QAAU,CAAA,CAAA;WACT,IAAC,CAAA,iBAAD,CAAA;EADS,CA/BV;;;EAmCA,IAAM,CAAA,CAAA;WACL,IAAC,CAAA,iBAAD,CAAA,CACA,CAAC,IADD,CACM,CAAA,CAAA,GAAA;aACL,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,CAAA,GAAA;QACX,IAAC,CAAA,oBAAoB,CAAC,IAAtB,CAA2B,CAAC,KAAD,EAAQ,IAAR,CAAA,GAAA;UAC1B,IAAG,KAAH;YACC,MAAA,CAAO,KAAP,EADD;WAAA,MAAA;YAGC,OAAA,CAAQ,oBAAA,CAAqB,IAArB,CAAR,EAHD;;QAD0B,CAA3B;MADW,CAAZ;IADK,CADN;EADK,CAnCN;;;EAgDA,KAAO,CAAC,IAAD,EAAO,gBAAP,CAAA;WACN,IAAC,CAAA,iBAAD,CAAA,CACA,CAAC,IADD,CACM,CAAA,CAAA,GAAA;MACL,IAAA,GAAO,iBAAA,CAAkB,IAAlB;MACP,gBAAA,GAAmB,iBAAA,CAAkB,gBAAlB,EAAoC,KAApC;MACnB,IAAC,CAAA,UAAU,CAAC,uBAAZ,CAAA;MACA,UAAA,CAAW,CAAA,eAAA,CAAA,CAAkB,IAAC,CAAA,IAAnB,CAAwB,SAAxB,CAAA,CAAoC,wBAAA,CAAyB,IAAzB,EAA+B,GAA/B,CAApC,CAAwE,CAAxE,CAAX;aACA,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,CAAA,GAAA;QACX,IAAC,CAAA,oBAAoB,CAAC,KAAtB,CAA4B,IAA5B,EAAkC,gBAAlC,EAAoD,CAAC,KAAD,CAAA,GAAA;UACnD,IAAG,KAAH;YACC,MAAA,CAAO,KAAP,EADD;WAAA,MAAA;YAGC,OAAA,CAAQ,IAAR,EAHD;;QADmD,CAApD;MADW,CAAZ;IALK,CADN;EADM,CAhDP;;;EAiEA,SAAW,CAAC,QAAD,CAAA;WACV,IAAC,CAAA,iBAAD,CAAA,CACA,CAAC,IADD,CACM,CAAA,CAAA,GAAA;aACL,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,CAAA,GAAA;QACX,IAAC,CAAA,oBAAoB,CAAC,SAAtB,CAAgC,CAAC,KAAD,CAAA,GAAA;UAC/B,IAAG,KAAH;YACC,MAAA,CAAO,KAAP,EADD;WAAA,MAAA;YAGC,IAAC,CAAA,WAAD,CAAa,eAAb,EAA8B,QAA9B;YACA,OAAA,CAAQ,IAAR,EAJD;;QAD+B,CAAhC;MADW,CAAZ;IADK,CADN;EADU;;AApEK,EAxJjB;;;AA0OA,OAAA,GAAU,MAAA,QAAc,aAAd,CAAA;;EAGT,WAAa,CAAC,aAAD,aAAA,CAAA;;IAAgB,IAAC,CAAA;IAE7B,IAAC,CAAA,iBAAD,CAAmB,aAAnB;AACA;EAHY,CAAb;;;EAMA,iBAAmB,CAAC,aAAD,CAAA;IAClB,IAAI,aAAA,KAAmB,IAAC,CAAA,aAAxB;MACC,IAAC,CAAA,aAAD,GAAiB;MACjB,IAAC,CAAA,IAAD,GAAQ,2BAAA,CAA4B,IAAC,CAAA,aAAa,CAAC,IAA3C,EAFT;;IAGA,IAAC,CAAA,sBAAD,CAAA;WACA;EALkB,CANnB;;;EAcA,IAAM,CAAC,QAAD,CAAA;IACL,WAAA,CAAY,CAAA,QAAA,CAAA,CAAW,IAAC,CAAA,IAAZ,CAAiB,UAAjB,CAAA,CAA8B,QAA9B,CAAuC,CAAvC,CAAZ;gBADD,CAAA,IAEC,CAAM,GAAA,SAAN;EAFK,CAdN;;;EAmBA,sBAAwB,CAAA,CAAA;AACvB,QAAA,cAAA,EAAA,mBAAA,EAAA,CAAA,EAAA,GAAA,EAAA,oBAAA,EAAA;IAAA,IAAC,CAAA,mBAAD,GAAuB,iBAAA,CAAkB,IAAC,CAAA,eAAnB,EAAoC,CAAA,CAApC;IACvB,IAAC,CAAA,eAAD,GAAmB,CAAA;IACnB,IAAG,IAAC,CAAA,aAAa,CAAC,eAAlB;AACC;MAAA,KAAA,qCAAA;;QACC,mBAAA,GAAsB,2BAAA,CAA4B,oBAAoB,CAAC,IAAjD;QACtB,cAAA,GAAiB,IAAC,CAAA,mBAAoB,CAAA,mBAAA;QACtC,IAAG,cAAA,CAAe,cAAf,CAAH;UACC,cAAc,CAAC,wBAAf,CAAwC,oBAAxC,EADD;SAAA,MAAA;UAGC,cAAA,GAAkB,IAAI,cAAJ,CAAmB,oBAAnB,EAAyC,IAAzC,EAHnB;;QAIA,IAAC,CAAA,eAAgB,CAAA,mBAAA,CAAjB,GAAwC;MAPzC,CADD;;WASA;EAZuB,CAnBxB;;;EAkCA,iBAAmB,CAAA,CAAA;WAClB,IAAC,CAAA,UAAU,CAAC,iBAAZ,CAAA,CACA,CAAC,IADD,CACM,CAAA,CAAA,GAAA;aACL;IADK,CADN;EADkB,CAlCnB;;;EAwCA,QAAU,CAAA,CAAA;WACT,IAAC,CAAA,iBAAD,CAAA;EADS,CAxCV;;;EA4CA,6BAA+B,CAAC,iBAAD,CAAA;WAC9B,IAAC,CAAA,eAAgB,CAAA,2BAAA,CAA4B,iBAA5B,CAAA;EADa,CA5C/B;;;EAgDA,kBAAoB,CAAC,iBAAD,CAAA;WACnB,IAAC,CAAA,iBAAD,CAAA,CACA,CAAC,IADD,CACM,CAAA,CAAA,GAAA;aACL,IAAC,CAAA,6BAAD,CAA+B,iBAA/B;IADK,CADN;EADmB;;AAnDX,EA1OV;;;AAmSA,UAAA;;;WAAa,MAAA,QAAc,aAAd,CAAA;;IAMZ,WAAa,CAAC,gBAAD,CAAA;WACZ,CAAA;MACA,IAAC,CAAA,wBAAD,CAA0B,CAA1B;MACA,IAAC,CAAA,oBAAD,CAAsB,gBAAtB;AACA;IAJY,CAHb;;;IAUA,uBAAyB,CAAA,CAAA;aACxB,IAAC,CAAA,gBAAD,GAAoB,oBAAA,CAAA;IADI,CAVzB;;;IAcA,wBAA0B,uBAAA,CAAA;MAAC,IAAC,CAAA;aAC3B;IADyB,CAd1B;;;IAkBA,oBAAsB,CAAC,gBAAD,CAAA;AACrB,UAAA;MAAA,IAAI,gBAAA,KAAsB,IAAC,CAAA,gBAA3B;QACC,IAAC,CAAA,gBAAD,GAAoB;QACpB,IAAC,CAAA,OAAD,GAAW,wBAAA,CAAyB,IAAC,CAAA,gBAAgB,CAAC,OAA3C;QACX,IAAC,CAAA,YAAD,GAAgB,IAAC,CAAA,gBAAgB,CAAC;QAClC,aAAA,GAAgB,IAAC,CAAA,gBAAgB,CAAC;QAClC,IAAC,CAAA,aAAD,GACC;UAAA,iBAAA,EAAmB,oBAAA,CAAqB,aAAa,CAAC,gBAAnC,CAAnB;UACA,IAAA,EAAM,aAAa,CAAC,SADpB;UAEA,YAAA,EAAc,aAAa,CAAC,WAAW,CAAC,GAA1B,CAA8B,QAAA,CAAC,YAAD,CAAA;mBAC3C;cAAA,IAAA,EAAM,2BAAA,CAA4B,YAAY,CAAC,IAAzC,CAAN;cACA,IAAA,EAAM,oBAAA,CAAqB,YAAY,CAAC,IAAlC;YADN;UAD2C,CAA9B,CAFd;UAKA,0BAAA,EAA4B,CAAI,aAAa,CAAC,uBAAjB,GAA8C,aAAa,CAAC,uBAAuB,CAAC,GAAtC,CAA0C,2BAA1C,CAA9C,GAA0H,EAA3H,CAL5B;UAMA,aAAA,EAAe,aAAa,CAAC,YAAY,CAAC,GAA3B,CAA+B,2BAA/B,CANf;UAOA,cAAA,EAAgB,aAAa,CAAC;QAP9B;QAQD,IAAC,CAAA,WAAD,GAAe,IAAC,CAAA,gBAAgB,CAAC;QACjC,IAAC,CAAA,IAAD,GAAQ,IAAC,CAAA,gBAAgB,CAAC;QAC1B,IAAC,CAAA,gBAAgB,CAAC,EAAlB,CAAqB,SAArB,EAAgC,CAAA,CAAA,GAAA;UAC/B,IAAC,CAAA,KAAD,GAAS,WAAA,CAAY,CAAA,CAAA,GAAA;YACnB,IAAI,CAAC,IAAC,CAAA,sBAAD,GAA0B,CAA3B,CAAA,IAAkC,CAAC,oBAAA,CAAA,CAAA,IAA0B,CAAC,IAAC,CAAA,gBAAD,GAAoB,IAAC,CAAA,sBAAtB,CAA3B,CAAtC;qBACC,IAAC,CAAA,mBAAD,CAAA,EADD;;UADmB,CAAZ,EAGN,GAHM;UAIT,IAAC,CAAA,SAAD,CAAW,iBAAiB,CAAC,SAA7B;UACA,IAAC,CAAA,IAAD,CAAM,WAAN;QAN+B,CAAhC;QAQA,IAAC,CAAA,gBAAgB,CAAC,EAAlB,CAAqB,YAArB,EAAmC,CAAA,CAAA,GAAA;UAClC,aAAA,CAAc,IAAC,CAAA,KAAf;UACA,IAAC,CAAA,KAAD,GAAS;UACT,IAAC,CAAA,SAAD,CAAW,iBAAiB,CAAC,YAA7B;UACA,IAAC,CAAA,IAAD,CAAM,cAAN;QAJkC,CAAnC;QAMA,IAAC,CAAA,gBAAgB,CAAC,EAAlB,CAAqB,YAArB,EAAmC,CAAC,IAAD,CAAA,GAAA;UAClC,IAAC,CAAA,IAAD,GAAQ;UACR,IAAC,CAAA,IAAD,CAAM,aAAN,EAAqB,IAArB;QAFkC,CAAnC,EA9BD;OAAA;;MAmCA,IAAC,CAAA,SAAD,CAAW,iBAAiB,CAAC,YAA7B;MACA,IAAC,CAAA,eAAD,CAAA;aACA;IAtCqB,CAlBtB;;;IA2DA,IAAM,CAAC,QAAD,CAAA;MACL,WAAA,CAAY,CAAA,WAAA,CAAA,CAAc,IAAC,CAAA,OAAf,CAAuB,UAAvB,CAAA,CAAoC,QAApC,CAA6C,CAA7C,CAAZ;kBADD,CAAA,IAEC,CAAM,GAAA,SAAN;IAFK,CA3DN;;;IAgEA,SAAW,CAAC,KAAD,CAAA;MACV,IAAI,KAAA,KAAW,IAAC,CAAA,KAAhB;QACC,IAAC,CAAA,uBAAD,CAAA;QACA,IAAC,CAAA,KAAD,GAAS;QACT,IAAC,CAAA,YAAD,GAAiB,KAAA,IAAS,iBAAiB,CAAC;QAC5C,IAAC,CAAA,aAAD,GAAkB,KAAA,IAAS,iBAAiB,CAAC,WAJ9C;;aAKA;IANU,CAhEX;;;IAyEA,WAAa,CAAA,CAAA;aACZ,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,CAAA,GAAA;QACX,IAAC,CAAA,gBAAgB,CAAC,UAAlB,CAA6B,QAAA,CAAC,KAAD,EAAQ,IAAR,CAAA;UAC5B,IAAG,KAAH;YACC,MAAA,CAAO,KAAP,EADD;WAAA,MAAA;YAGC,OAAA,CAAQ,IAAR,EAHD;;QAD4B,CAA7B;MADW,CAAZ;IADY,CAzEb;;;IAoFA,eAAiB,CAAA,CAAA;AAChB,UAAA,CAAA,EAAA,GAAA,EAAA,aAAA,EAAA,GAAA,EAAA,OAAA,EAAA;MAAA,IAAC,CAAA,YAAD,GAAgB,iBAAA,CAAkB,IAAC,CAAA,QAAnB,EAA6B,CAAA,CAA7B;MAChB,IAAC,CAAA,QAAD,GAAY,CAAA;MACZ,IAAG,IAAC,CAAA,gBAAgB,CAAC,QAArB;AACC;QAAA,KAAA,qCAAA;;UACC,YAAA,GAAe,2BAAA,CAA4B,aAAa,CAAC,IAA1C;UACf,OAAA,GAAU,IAAC,CAAA,YAAa,CAAA,YAAA;UACxB,IAAG,cAAA,CAAe,OAAf,CAAH;YACC,OAAO,CAAC,iBAAR,CAA0B,aAA1B,EADD;WAAA,MAAA;YAGC,OAAA,GAAW,IAAI,OAAJ,CAAY,aAAZ,EAA2B,IAA3B,EAHZ;;UAIA,IAAC,CAAA,QAAS,CAAA,YAAA,CAAV,GAA0B;QAP3B,CADD;;aASA;IAZgB,CApFjB;;;IAmGA,mBAAqB,CAAA,CAAA;aACpB,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,CAAA,GAAA;QACX,IAAG,CAAI,IAAC,CAAA,YAAR;UACC,OAAA,CAAQ,IAAR,EADD;SAAA,MAAA;UAGC,IAAC,CAAA,gBAAgB,CAAC,UAAlB,CAA6B,CAAC,KAAD,CAAA,GAAA;YAC5B,IAAG,KAAH;cACC,MAAA,CAAO,KAAP,EADD;aAAA,MAAA;cAGC,OAAA,CAAQ,IAAR,EAHD;;UAD4B,CAA7B,EAHD;;MADW,CAAZ;IADoB,CAnGrB;;;IAiHA,UAAY,CAAA,CAAA;aACX,IAAC,CAAA,mBAAD,CAAA;IADW,CAjHZ;;;IAqHA,gBAAkB,CAAA,CAAA;aACjB,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,CAAA,GAAA;QACX,IAAG,IAAC,CAAA,YAAJ;UACC,OAAA,CAAQ,IAAR,EADD;SAAA,MAAA;UAGC,IAAC,CAAA,gBAAgB,CAAC,OAAlB,CAA0B,CAAC,KAAD,CAAA,GAAA;YACzB,IAAG,KAAH;cACC,MAAA,CAAO,KAAP,EADD;aAAA,MAAA;cAGC,OAAA,CAAQ,IAAR,EAHD;;UADyB,CAA1B,EAHD;;MADW,CAAZ;IADiB,CArHlB;;;IAmIA,OAAS,CAAA,CAAA;aACR,IAAC,CAAA,gBAAD,CAAA;IADQ,CAnIT;;;IAuIA,iBAAmB,CAAA,CAAA;aAClB,IAAC,CAAA,gBAAD,CAAA,CACA,CAAC,IADD,CACM,CAAA,CAAA,GAAA;eACL,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,CAAA,GAAA;UACX,IAAG,IAAC,CAAA,aAAJ;YACC,OAAA,CAAQ,IAAR,EADD;WAAA,MAAA;YAGC,IAAC,CAAA,gBAAgB,CAAC,qCAAlB,CAAwD,CAAC,KAAD,CAAA,GAAA;cACvD,IAAG,KAAH;gBACC,MAAA,CAAO,KAAP,EADD;eAAA,MAAA;gBAGC,IAAC,CAAA,eAAD,CAAA;gBACA,IAAC,CAAA,SAAD,CAAW,iBAAiB,CAAC,UAA7B;gBACA,IAAC,CAAA,IAAD,CAAM,YAAN;gBACA,OAAA,CAAQ,IAAR,EAND;;YADuD,CAAxD,EAHD;;QADW,CAAZ;MADK,CADN;IADkB,CAvInB;;;IA0JA,QAAU,CAAA,CAAA;aACT,IAAC,CAAA,iBAAD,CAAA;IADS,CA1JV;;;IA8JA,sBAAwB,CAAC,UAAD,CAAA;aACvB,IAAC,CAAA,QAAS,CAAA,2BAAA,CAA4B,UAA5B,CAAA;IADa,CA9JxB;;;IAkKA,WAAa,CAAC,UAAD,CAAA;aACZ,IAAC,CAAA,iBAAD,CAAA,CACA,CAAC,IADD,CACM,CAAA,CAAA,GAAA;eACL,IAAC,CAAA,sBAAD,CAAwB,UAAxB;MADK,CADN;IADY,CAlKb;;;IAwKA,6BAA+B,CAAC,UAAD,EAAa,iBAAb,CAAA;aAC9B,IAAC,CAAA,sBAAD,CAAwB,UAAxB,CAAmC,CAAC,6BAApC,CAAkE,iBAAlE;IAD8B,CAxK/B;;;;IA4KA,kBAAoB,CAAC,UAAD,EAAa,iBAAb,CAAA;aACnB,IAAC,CAAA,iBAAD,CAAA,CACA,CAAC,IADD,CACM,CAAA,CAAA,GAAA;eACL,IAAC,CAAA,6BAAD,CAA+B,UAA/B,EAA2C,iBAA3C;MADK,CADN;IADmB;;EA/KR;;;EAGZ,MAAC,CAAA,MAAD,GAAS;;;;cAtSV;;;AAwdA,mBAAA,GAAsB,QAAA,CAAC,iBAAD,CAAA;EACrB,iBAAA,GAAoB,sBAAA,CAAuB,iBAAvB;SACpB,kBAAA,CAAmB,WAAnB,CACA,CAAC,IADD,CACM,QAAA,CAAA,CAAA;WACL,IAAI,OAAJ,CAAY,QAAA,CAAC,OAAD,EAAU,MAAV,CAAA;MACX,KAAK,CAAC,EAAN,CAAS,UAAT,EAAqB,QAAA,CAAC,gBAAD,CAAA;AACpB,YAAA;QAAA,UAAA,GAAa,IAAI,UAAJ,CAAe,gBAAf;QACb,IAAG,iBAAA,CAAkB,UAAlB,CAAH;UACC,KAAK,CAAC,YAAN,CAAA;UACA,OAAA,CAAQ,UAAR,EAFD;;MAFoB,CAArB;MAMA,KAAK,CAAC,aAAN,CAAA;IAPW,CAAZ;EADK,CADN;AAFqB,EAxdtB;;;AAueA,qBAAA,GAAwB,QAAA,CAAC,iBAAD,CAAA;SACvB,mBAAA,CAAoB,iBAApB,CACA,CAAC,IADD,CACM,QAAA,CAAC,UAAD,CAAA;WACL,UAAU,CAAC,gBAAX,CAAA;EADK,CADN;AADuB,EAvexB;;;AA6eA,mBAAA,GAAsB,QAAA,CAAC,iBAAD,CAAA;SACrB,mBAAA,CAAoB,iBAApB,CACA,CAAC,IADD,CACM,QAAA,CAAC,UAAD,CAAA;WACL,UAAU,CAAC,iBAAX,CAAA;EADK,CADN;AADqB,EA7etB;;;AAmfA,aAAA,GAAgB,QAAA,CAAA,CAAA;SACf,IAAI,OAAJ,CAAY,QAAA,CAAC,OAAD,EAAU,MAAV,CAAA;IACX,KAAK,CAAC,IAAN,CAAW,UAAX,EAAuB,QAAA,CAAA,CAAA;MACtB,OAAA,CAAA;IADsB,CAAvB;IAGA,KAAK,CAAC,YAAN,CAAA;EAJW,CAAZ;AADe,EAnfhB;;;AA4fA,kBAAA,GAAqB,QAAA,CAAC,OAAD,EAAU,UAAV,EAAsB,qBAAtB,CAAA;EACpB,IAAI,UAAA,KAAc,CAAlB;AAA0B,WAAO,QAAjC;;EACA,qBAAA,GAAwB,iBAAA,CAAkB,qBAAlB,EAAyC,qCAAzC;SACxB,IAAI,OAAJ,CAAY,QAAA,CAAC,OAAD,EAAU,MAAV,CAAA;AACX,QAAA;IAAA,OAAA,GAAU,UAAA,CAAW,QAAA,CAAA,CAAA;MACnB,MAAA,CAAO,qBAAP;IADmB,CAAX,EAGP,UAHO;IAIV,OAAO,CAAC,OAAR,CAAgB,OAAhB,CACA,CAAC,IADD,CACM,QAAA,CAAC,cAAD,CAAA;MACL,YAAA,CAAa,OAAb;MACA,OAAA,CAAQ,cAAR;IAFK,CADN,CAKA,CAAC,KALD,CAKO,QAAA,CAAC,aAAD,CAAA;MACN,YAAA,CAAa,OAAb;MACA,MAAA,CAAO,aAAP;IAFM,CALP;EALW,CAAZ;AAHoB,EA5frB;;;AAghBA,MAAM,CAAC,OAAP,GACC;EAAA,YAAA,EACC;IAAA,OAAA,EAAS,wBAAT;IACA,cAAA,EAAgB;EADhB,CADD;EAGA,qBAAA,EAAuB,qBAHvB;EAIA,mBAAA,EAAqB,mBAJrB;EAKA,MAAA,EAAQ,YALR;EAMA,mBAAA,EAAqB,mBANrB;EAOA,aAAA,EAAe,aAPf;EAQA,KAAA,EACC;IAAA,kBAAA,EAAoB;EAApB;AATD",
  "sourcesContent": [
    "'use strict'\n\n# Canonicalize hexadecimal string <hex_string> by removing all non-hexadecimal characters, and converting all hex digits to lower case\ncanonicalize_hex_string = (hex_string) ->\n\thex_string.replace(/[^0-9A-Fa-f]/g, '').toLowerCase()\n\n# Canonicalize UUID string <uuid>\ncanonicalize_uuid = (uuid) ->\n\thex = canonicalize_hex_string(uuid)\n\t\"#{hex[0...8]}-#{hex[8...12]}-#{hex[12...16]}-#{hex[16...20]}-#{hex[20...32]}\"\n\n# Canonicalize bluetooth UUID <uuid> (which may be an integer or a hexadecimal string), by converting it to a canonical, 36 characters long UUID string\ncanonicalize_bluetooth_uuid = (uuid) ->\n\tif (typeof(uuid) is 'number')\n\t\tuuid = uuid.toString(0x10)\n\tuuid = canonicalize_hex_string(uuid)\n\tif (uuid.length < 8)\n\t\tuuid = ('00000000' + uuid).slice(-8)\n\tif (uuid.length is 8)\n\t\tuuid += '1000800000805f9b34fb'\n\tcanonicalize_uuid(uuid)\n\n# Returns an array with chunks/slices of <slicable>. Each chunk/slice has the same length <chunk_length> (except for the last chunk/slice, which may have a smaller length)\nsplit_into_chunks = (slicable, chunk_length) ->\n\t(slicable.slice(index, (index + chunk_length)) for index in [0...slicable.length] by chunk_length)\n\n# Canonicalize the MAC address <mac_address> (a string)\ncanonicalize_mac_address = (mac_address) ->\n\tsplit_into_chunks(canonicalize_hex_string(mac_address), 2).join(':')\n\n# Returns a peripheral filter function with argument <peripheral> that returns true if the address of <peripheral> equals <address>\naddress_filter = (address) ->\n\taddress = canonicalize_mac_address(address)\n\t(peripheral) ->\n\t\t(peripheral.address is address)\n\n# Returns true if <value> is an array\nis_array = (value) ->\n\tArray.isArray(value)\n\n# Returns a peripheral filter function with argument <peripheral> that returns true if all service IDs in <service_ids> are in the list of services that peripheral <peripheral> advertises\nadvertised_services_filter = (service_ids) ->\n\tif not is_array(service_ids)\n\t\tservice_ids = [service_ids]\n\tservice_uuids = service_ids.map(canonicalize_bluetooth_uuid)\n\t(peripheral) ->\n\t\tfor service_uuid in service_uuids\n\t\t\tif (not (service_uuid in peripheral.advertisement.service_uuids))\n\t\t\t\treturn false\n\t\ttrue\n\n# Returns a peripheral filter function with argument <peripheral> that returns true if the address of <peripheral> equals <name>\nname_filter = (name) ->\n\t(peripheral) ->\n\t\t(peripheral.advertisement.name is name)\n\n# The various filter types\nfilter_types =\n\taddress: address_filter\n\tname: name_filter\n\tservice: advertised_services_filter\n\tservices: advertised_services_filter\n\n# Returns a function with argument <value> that returns true if <value> is of type <type_string>, false otherwise\nis_of_type = (type_string) ->\n\t(value) ->\n\t\t(typeof(value) is type_string)\n\n# Returns true if the passed argument <value> is of type \"function\", false otherwise\nis_function_type = is_of_type('function')\n\n# Returns true if the passed argument <value> is neither null nor undefined\nis_valid_value = (value) ->\n\t(not ((value is undefined) or (value is null)))\n\n# Returns a filter function according to <options>. <options> must either be a function, in which case the function is simply returned, or an object like {\"name\":\"btleperipheral\", \"services\":[0x1827]}, with valid peripheral filter type ids as keys, and the parameter for that peripheral filter type as values. If one of the values is null or undefined, this sub filter will be skipped.\ncreate_filter_function = (options) ->\n\tif is_function_type(options) then return options\n\tsub_filters = []\n\tfor filter_type, filter_value of options\n\t\tif is_valid_value(filter_value)\n\t\t\tsub_filters.push(filter_types[filter_type](filter_value))\n\t(peripheral) ->\n\t\tfor sub_filter in sub_filters\n\t\t\tif (not sub_filter(peripheral))\n\t\t\t\treturn false\n\t\ttrue\n\n# Import/Require the \"noble\" module for Bluetooth LE communication\nnoble = require('noble')\n\n# Returns a promise that resolves is the state is noble is <noble_state_string>\nensure_noble_state = (noble_state_string) ->\n\tnew Promise (resolve, reject) ->\n\t\tif (noble.state is noble_state_string)\n\t\t\tresolve()\n\t\telse\n\t\t\tnoble.on 'stateChange', (state) ->\n\t\t\t\tif (state is noble_state_string)\n\t\t\t\t\tresolve()\n\t\t\t\treturn\n\t\treturn\n\n# Convert a Buffer instance <buffer> to an array of byte integers\nbuffer_to_byte_array = (buffer) ->\n\tif (not is_valid_value(buffer)) then return null \n\t[buffer...]\n\n# Debug log function for events\ndebug_event = require('debug')('simble:event')\n\n# Import/Require the \"events\" module as EventEmitter\nEventEmitter = require('events')\n\n# Returns the first value in <values...> that is neither null nor undefined\nfirst_valid_value = (values...) ->\n\tfor value in values\n\t\tif is_valid_value(value)\n\t\t\treturn value\n\treturn\n\n# Returns the current timestamp, as milliseconds since the epoch\nget_timestamp_millis = ->\n\tDate.now()\n\n# The possible states a peripheral can have\nperipheral_states =\n\tDISCONNECTED: 1\n\tCONNECTED: 2\n\tDISCOVERED: 3\n\n# Converts integer value <integer> into a zero-prefixed hexadecimal string of length <number_of_digits>\ninteger_to_zero_prefixed_hex_string = (integer, number_of_digits) ->\n\t('0'.repeat(number_of_digits) + integer.toString(0x10)).slice(-number_of_digits)\n\n# Convert the byte array <byte_array> to a hexadecimal string. Every byte value is converted to a two-digit, zero padded hexadecimal string, prefixed with string <prefix_string> (default:\"\"), suffixed with string <suffix_string> (default:\"\"). All bytes are separated with string <separator_string> (default:\" \")\nbyte_array_to_hex_string = (byte_array, separator_string, prefix_string, suffix_string) ->\n\tseparator_string = first_valid_value(separator_string, ' ')\n\tprefix_string = first_valid_value(prefix_string, '')\n\tsuffix_string = first_valid_value(suffix_string, '')\n\t(\"#{prefix_string}#{integer_to_zero_prefixed_hex_string(byte, 2)}#{suffix_string}\" for byte in byte_array).join(separator_string)\n\n# Convert <value> to a Buffer instance\nconvert_to_buffer = (value) ->\n\tif not Buffer.isBuffer(value)\n\t\tvalue = Buffer.from(value)\n\tvalue\n\n# Debug log function for data that is being transferred\ndebug_data = require('debug')('simble:data')\n\n# This class represents a Bluetooth LE characteristic\nCharacteristic = class extends EventEmitter\n\n\t# Constructor, instantiates a new Characteristic instance\n\tconstructor: (noble_characteristic, @service) ->\n\t\tsuper()\n\t\t@peripheral = @service.peripheral\n\t\t@set_noble_characteristic(noble_characteristic)\n\t\treturn\n\n\t# Set the noble peripheral that this Characteristic instance is a wrapper for\n\tset_noble_characteristic: (noble_characteristic) ->\n\t\tif (noble_characteristic isnt @noble_characteristic)\n\t\t\t@noble_characteristic = noble_characteristic\n\t\t\t@uuid = canonicalize_bluetooth_uuid(@noble_characteristic.uuid)\n\t\t\t@noble_characteristic.on 'data', (data) =>\n\t\t\t\tdata = buffer_to_byte_array(data)\n\t\t\t\t@peripheral.update_last_action_time()\n\t\t\t\tdebug_data \"Characteristic #{@uuid} : Receive \\\"#{byte_array_to_hex_string(data, ' ')}\\\"\"\n\t\t\t\t@emit('data_received', data)\n\t\t\t\treturn\n\t\t@\n\n\t# Emit the event <event_id>, with optional additional arguments\n\temit: (event_id) ->\n\t\tdebug_event \"Characteristic #{@uuid} : Event \\\"#{event_id}\\\"\"\n\t\tsuper arguments...\n\n\t# Ensure that the peripheral was discovered - returns a Promise that resolves once it is discovered\n\tensure_discovered: ->\n\t\t@service.ensure_discovered()\n\t\t.then =>\n\t\t\t@\n\n\t# Alias for ensure_discovered()\n\tdiscover: ->\n\t\t@ensure_discovered()\n\n\t# Read the characteristic's current value. Returns a Promise that resolves to a byte array\n\tread: ->\n\t\t@ensure_discovered()\n\t\t.then =>\n\t\t\tnew Promise (resolve, reject) =>\n\t\t\t\t@noble_characteristic.read (error, data) =>\n\t\t\t\t\tif error\n\t\t\t\t\t\treject(error)\n\t\t\t\t\telse\n\t\t\t\t\t\tresolve(buffer_to_byte_array(data))\n\t\t\t\t\treturn\n\t\t\t\treturn\n\n\t# Set the characteristic's value to <data> (a byte array). If <without_response> is true, the characteristic will be written withour waiting for a response/confirmation. Returns a Promise that resolves if the characteristic was set/written\n\twrite: (data, without_response) ->\n\t\t@ensure_discovered()\n\t\t.then =>\n\t\t\tdata = convert_to_buffer(data)\n\t\t\twithout_response = first_valid_value(without_response, false)\n\t\t\t@peripheral.update_last_action_time()\n\t\t\tdebug_data \"Characteristic #{@uuid} : Send \\\"#{byte_array_to_hex_string(data, ' ')}\\\"\"\n\t\t\tnew Promise (resolve, reject) =>\n\t\t\t\t@noble_characteristic.write data, without_response, (error) =>\n\t\t\t\t\tif error\n\t\t\t\t\t\treject(error)\n\t\t\t\t\telse\n\t\t\t\t\t\tresolve(@)\n\t\t\t\t\treturn\n\t\t\t\treturn\n\n\t# Subscribe to the characteristic. The <listener> function will be called with <data> (a byte array) argument whenever new data arrives. Returns a Promise that resolves if \n\tsubscribe: (listener) ->\n\t\t@ensure_discovered()\n\t\t.then =>\n\t\t\tnew Promise (resolve, reject) =>\n\t\t\t\t@noble_characteristic.subscribe (error) =>\n\t\t\t\t\tif error\n\t\t\t\t\t\treject(error)\n\t\t\t\t\telse\n\t\t\t\t\t\t@addListener('data_received', listener)\n\t\t\t\t\t\tresolve(@)\n\t\t\t\t\treturn\n\t\t\t\treturn\n\n# This class represents a Bluetooth LE service\nService = class extends EventEmitter\n\n\t# Constructor, instantiates a new Service instance\n\tconstructor: (noble_service, @peripheral) ->\n\t\tsuper()\n\t\t@set_noble_service(noble_service)\n\t\treturn\n\n\t# Set the noble service that this Service instance is a wrapper for\n\tset_noble_service: (noble_service) ->\n\t\tif (noble_service isnt @noble_service)\n\t\t\t@noble_service = noble_service\n\t\t\t@uuid = canonicalize_bluetooth_uuid(@noble_service.uuid)\n\t\t@update_characteristics()\n\t\t@\n\n\t# Emit the event <event_id>, with optional additional arguments\n\temit: (event_id) ->\n\t\tdebug_event \"Service #{@uuid} : Event \\\"#{event_id}\\\"\"\n\t\tsuper arguments...\n\n\t# Update the list of Characteristics, reusing old Characteristic instances if possible\n\tupdate_characteristics: ->\n\t\t@old_characteristics = first_valid_value(@characteristics, {})\n\t\t@characteristics = {}\n\t\tif @noble_service.characteristics\n\t\t\tfor noble_characteristic in @noble_service.characteristics\n\t\t\t\tcharacteristic_uuid = canonicalize_bluetooth_uuid(noble_characteristic.uuid)\n\t\t\t\tcharacteristic = @old_characteristics[characteristic_uuid]\n\t\t\t\tif is_valid_value(characteristic)\n\t\t\t\t\tcharacteristic.set_noble_characteristic(noble_characteristic)\n\t\t\t\telse\n\t\t\t\t\tcharacteristic = (new Characteristic(noble_characteristic, @))\n\t\t\t\t@characteristics[characteristic_uuid] = characteristic\n\t\t@\n\n\t# Ensure that the service was discovered - returns a Promise that resolves once it is discovered\n\tensure_discovered: ->\n\t\t@peripheral.ensure_discovered()\n\t\t.then =>\n\t\t\t@\n\n\t# Alias for ensure_discovered()\n\tdiscover: ->\n\t\t@ensure_discovered()\n\n\t# Synchronous version of get_characteristic() - requires that the peripheral was already discovered\n\tget_discovered_characteristic: (characteristic_id) ->\n\t\t@characteristics[canonicalize_bluetooth_uuid(characteristic_id)]\n\n\t# Asynchronous version of get_characteristic() - returns a Promise to the characteristic\n\tget_characteristic: (characteristic_id) ->\n\t\t@ensure_discovered()\n\t\t.then =>\n\t\t\t@get_discovered_characteristic(characteristic_id)\n\n# This class represents a Bluetooth LE peripheral\nPeripheral = class extends EventEmitter\n\n\t# The possible states a peripheral can have\n\t@STATES: peripheral_states\n\n\t# Constructor, instantiates a new Peripheral instance\n\tconstructor: (noble_peripheral) ->\n\t\tsuper()\n\t\t@set_auto_disconnect_time(0)\n\t\t@set_noble_peripheral(noble_peripheral)\n\t\treturn\n\n\t# Update the \"last_action_time\"\n\tupdate_last_action_time: ->\n\t\t@last_action_time = get_timestamp_millis()\n\n\t# Set the auto-disconnect time to <auto_disconnect_millis> milliseconds. A value of 0 disables auto-disconnect\n\tset_auto_disconnect_time: (@auto_disconnect_millis) ->\n\t\t@\n\n\t# Set the noble service that this Service instance is a wrapper for\n\tset_noble_peripheral: (noble_peripheral) ->\n\t\tif (noble_peripheral isnt @noble_peripheral)\n\t\t\t@noble_peripheral = noble_peripheral\n\t\t\t@address = canonicalize_mac_address(@noble_peripheral.address)\n\t\t\t@address_type = @noble_peripheral.addressType\n\t\t\tadvertisement = @noble_peripheral.advertisement\n\t\t\t@advertisement =\n\t\t\t\tmanufacturer_data: buffer_to_byte_array(advertisement.manufacturerData)\n\t\t\t\tname: advertisement.localName\n\t\t\t\tservice_data: advertisement.serviceData.map (service_data) ->\n\t\t\t\t\tuuid: canonicalize_bluetooth_uuid(service_data.uuid)\n\t\t\t\t\tdata: buffer_to_byte_array(service_data.data)\n\t\t\t\tservice_solicitation_uuids: (if advertisement.serviceSolicitationUuid then advertisement.serviceSolicitationUuid.map(canonicalize_bluetooth_uuid) else [])\n\t\t\t\tservice_uuids: advertisement.serviceUuids.map(canonicalize_bluetooth_uuid)\n\t\t\t\ttx_power_level: advertisement.txPowerLevel\n\t\t\t@connectable = @noble_peripheral.connectable\n\t\t\t@rssi = @noble_peripheral.rssi\n\t\t\t@noble_peripheral.on 'connect', =>\n\t\t\t\t@timer = setInterval =>\n\t\t\t\t\t\tif ((@auto_disconnect_millis > 0) and (get_timestamp_millis() >= (@last_action_time + @auto_disconnect_millis)))\n\t\t\t\t\t\t\t@ensure_disconnected()\n\t\t\t\t\t, 100\n\t\t\t\t@set_state(peripheral_states.CONNECTED)\n\t\t\t\t@emit 'connected'\n\t\t\t\treturn\n\t\t\t@noble_peripheral.on 'disconnect', =>\n\t\t\t\tclearInterval(@timer)\n\t\t\t\t@timer = null\n\t\t\t\t@set_state(peripheral_states.DISCONNECTED)\n\t\t\t\t@emit 'disconnected'\n\t\t\t\treturn\n\t\t\t@noble_peripheral.on 'rssiUpdate', (rssi) =>\n\t\t\t\t@rssi = rssi\n\t\t\t\t@emit 'rssi_update', rssi\n\t\t\t\treturn\n\t\t# TODO better set state to actual state\n\t\t@set_state(peripheral_states.DISCONNECTED)\n\t\t@update_services()\n\t\t@\n\n\t# Emit the event <event_id>, with optional additional arguments\n\temit: (event_id) ->\n\t\tdebug_event \"Peripheral #{@address} : Event \\\"#{event_id}\\\"\"\n\t\tsuper arguments...\n\n\t# Set the current state to <state> (must be one of the values in Peripheral.states\n\tset_state: (state) ->\n\t\tif (state isnt @state)\n\t\t\t@update_last_action_time()\n\t\t\t@state = state\n\t\t\t@is_connected = (state >= peripheral_states.CONNECTED)\n\t\t\t@is_discovered = (state >= peripheral_states.DISCOVERED)\n\t\t@\n\n\t# Update the RSSI (Received Signal Strength Indicator). Returns a Promise that resolves to the current RSSI value\n\tupdate_rssi: ->\n\t\tnew Promise (resolve, reject) =>\n\t\t\t@noble_peripheral.updateRssi (error, rssi) ->\n\t\t\t\tif error\n\t\t\t\t\treject(error)\n\t\t\t\telse\n\t\t\t\t\tresolve(rssi)\n\t\t\t\treturn\n\t\t\treturn\n\n\t# Update the list of services, reusing old Service instances if possible\n\tupdate_services: ->\n\t\t@old_services = first_valid_value(@services, {})\n\t\t@services = {}\n\t\tif @noble_peripheral.services\n\t\t\tfor noble_service in @noble_peripheral.services\n\t\t\t\tservice_uuid = canonicalize_bluetooth_uuid(noble_service.uuid)\n\t\t\t\tservice = @old_services[service_uuid]\n\t\t\t\tif is_valid_value(service)\n\t\t\t\t\tservice.set_noble_service(noble_service)\n\t\t\t\telse\n\t\t\t\t\tservice = (new Service(noble_service, @))\n\t\t\t\t@services[service_uuid] = service\n\t\t@\n\n\t# Ensure the peripheral is disconnected. Returns a Promise that resolves once the peripheral is disconnected\n\tensure_disconnected: ->\n\t\tnew Promise (resolve, reject) =>\n\t\t\tif not @is_connected\n\t\t\t\tresolve(@)\n\t\t\telse\n\t\t\t\t@noble_peripheral.disconnect (error) =>\n\t\t\t\t\tif error\n\t\t\t\t\t\treject(error)\n\t\t\t\t\telse\n\t\t\t\t\t\tresolve(@)\n\t\t\t\t\treturn\n\t\t\treturn\n\n\t# Alias for ensure_disconnected()\n\tdisconnect: ->\n\t\t@ensure_disconnected()\n\n\t# Ensure the peripheral is connected. Returns a Promise that resolves once the peripheral is connected\n\tensure_connected: ->\n\t\tnew Promise (resolve, reject) =>\n\t\t\tif @is_connected\n\t\t\t\tresolve(@)\n\t\t\telse\n\t\t\t\t@noble_peripheral.connect (error) =>\n\t\t\t\t\tif error\n\t\t\t\t\t\treject(error)\n\t\t\t\t\telse\n\t\t\t\t\t\tresolve(@)\n\t\t\t\t\treturn\n\t\t\treturn\n\n\t# Alias for ensure_connected()\n\tconnect: ->\n\t\t@ensure_connected()\n\n\t# Ensure the peripheral is discovered. Returns a Promise that resolves once the peripheral is discovered\n\tensure_discovered: ->\n\t\t@ensure_connected()\n\t\t.then =>\n\t\t\tnew Promise (resolve, reject) =>\n\t\t\t\tif @is_discovered\n\t\t\t\t\tresolve(@)\n\t\t\t\telse\n\t\t\t\t\t@noble_peripheral.discoverAllServicesAndCharacteristics (error) =>\n\t\t\t\t\t\tif error\n\t\t\t\t\t\t\treject(error)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t@update_services()\n\t\t\t\t\t\t\t@set_state(peripheral_states.DISCOVERED)\n\t\t\t\t\t\t\t@emit 'discovered'\n\t\t\t\t\t\t\tresolve(@)\n\t\t\t\t\t\treturn\n\t\t\t\treturn\n\n\t# Alias for ensure_discovered()\n\tdiscover: ->\n\t\t@ensure_discovered()\n\n\t# Synchronous version of get_service() - requires that the peripheral was already discovered\n\tget_discovered_service: (service_id) ->\n\t\t@services[canonicalize_bluetooth_uuid(service_id)]\n\n\t# Asynchronous version of get_service() - returns a Promise to the service\n\tget_service: (service_id) ->\n\t\t@ensure_discovered()\n\t\t.then =>\n\t\t\t@get_discovered_service(service_id)\n\n\t# Synchronous version of get_characteristic() - requires that the peripheral was already discovered\n\tget_discovered_characteristic: (service_id, characteristic_id) ->\n\t\t@get_discovered_service(service_id).get_discovered_characteristic(characteristic_id)#\n\n\t# Asynchronous version of get_characteristic() - returns a Promise to the characteristic\n\tget_characteristic: (service_id, characteristic_id) ->\n\t\t@ensure_discovered()\n\t\t.then =>\n\t\t\t@get_discovered_characteristic(service_id, characteristic_id)\n\n# Scan for a peripheral that matches the filter <peripheral_filter>. Returns a Promise that resolves to the peripheral if found\nscan_for_peripheral = (peripheral_filter) ->\n\tperipheral_filter = create_filter_function(peripheral_filter)\n\tensure_noble_state('poweredOn')\n\t.then ->\n\t\tnew Promise (resolve, reject) ->\n\t\t\tnoble.on 'discover', (noble_peripheral) ->\n\t\t\t\tperipheral = new Peripheral(noble_peripheral)\n\t\t\t\tif peripheral_filter(peripheral)\n\t\t\t\t\tnoble.stopScanning()\n\t\t\t\t\tresolve(peripheral)\n\t\t\t\treturn\n\t\t\tnoble.startScanning()\n\t\t\treturn\n\n# Scan for a peripheral that matches the filter <peripheral_filter> and connect to it. Returns a Promise that resolves to the peripheral\nconnect_to_peripheral = (peripheral_filter) ->\n\tscan_for_peripheral(peripheral_filter)\n\t.then (peripheral) ->\n\t\tperipheral.ensure_connected()\n\n# Scan for a peripheral that matches the filter <peripheral_filter>, connect and discover it. Returns a Promise that resolves to the peripheral\ndiscover_peripheral = (peripheral_filter) ->\n\tscan_for_peripheral(peripheral_filter)\n\t.then (peripheral) ->\n\t\tperipheral.ensure_discovered()\n\n# Stop scanning for peripherals. Returns a Promise that resolves if the scanning has stopped.\nstop_scanning = ->\n\tnew Promise (resolve, reject) ->\n\t\tnoble.once 'scanStop', ->\n\t\t\tresolve()\n\t\t\treturn\n\t\tnoble.stopScanning()\n\t\treturn\n\n# Returns a promise that is a time-limited wrapper for promise <promise>. If the promise <promise> does not resolve within <time_limit> microseconds, the promise is rejected\ntime_limit_promise = (promise, time_limit, timeout_error_message) ->\n\tif (time_limit is 0) then return promise\n\ttimeout_error_message = first_valid_value(timeout_error_message, 'Promise did not resolve within time')\n\tnew Promise (resolve, reject) ->\n\t\ttimeout = setTimeout ->\n\t\t\t\treject(timeout_error_message)\n\t\t\t\treturn\n\t\t\t, time_limit\n\t\tPromise.resolve(promise)\n\t\t.then (promise_result) ->\n\t\t\tclearTimeout(timeout)\n\t\t\tresolve(promise_result)\n\t\t\treturn\n\t\t.catch (promise_error) ->\n\t\t\tclearTimeout(timeout)\n\t\t\treject(promise_error)\n\t\t\treturn\n\t\treturn\n\n# What this module exports\nmodule.exports =\n\tcanonicalize:\n\t\taddress: canonicalize_mac_address\n\t\tbluetooth_uuid: canonicalize_bluetooth_uuid\n\tconnect_to_peripheral: connect_to_peripheral\n\tdiscover_peripheral: discover_peripheral\n\tfilter: filter_types\n\tscan_for_peripheral: scan_for_peripheral\n\tstop_scanning: stop_scanning\n\tutils:\n\t\ttime_limit_promise: time_limit_promise\n"
  ]
}