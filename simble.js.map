{
  "version": 3,
  "file": "simble.js",
  "sourceRoot": "",
  "sources": [
    "simble.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "'use strict'\n\n# Canonicalize hexadecimal string <hex_string> by removing all non-hexadecimal characters, and converting all hex digits to lower case\ncanonicalize_hex_string = (hex_string) ->\n\thex_string.replace(/[^0-9A-Fa-f]/g, '').toLowerCase()\n\n# Canonicalize UUID string <uuid>\ncanonicalize_uuid = (uuid) ->\n\thex = canonicalize_hex_string(uuid)\n\t\"#{hex[0...8]}-#{hex[8...12]}-#{hex[12...16]}-#{hex[16...20]}-#{hex[20...32]}\"\n\n# Canonicalize bluetooth UUID <uuid> (which may be an integer or a hexadecimal string), by converting it to a canonical, 36 characters long UUID string\ncanonicalize_bluetooth_uuid = (uuid) ->\n\tif (typeof(uuid) is 'number')\n\t\tuuid = uuid.toString(0x10)\n\tuuid = canonicalize_hex_string(uuid)\n\tif (uuid.length < 8)\n\t\tuuid = ('00000000' + uuid).slice(-8)\n\tif (uuid.length is 8)\n\t\tuuid += '1000800000805f9b34fb'\n\tcanonicalize_uuid(uuid)\n\n# Returns an array with chunks/slices of <slicable>. Each chunk/slice has the same length <chunk_length> (except for the last chunk/slice, which may have a smaller length)\nsplit_into_chunks = (slicable, chunk_length) ->\n\t(slicable.slice(index, (index + chunk_length)) for index in [0...slicable.length] by chunk_length)\n\n# Canonicalize the MAC address <mac_address> (a string)\ncanonicalize_mac_address = (mac_address) ->\n\tsplit_into_chunks(canonicalize_hex_string(mac_address), 2).join(':')\n\n# Returns a peripheral filter function with argument <peripheral> that returns true if the address of <peripheral> equals <address>\naddress_filter = (address) ->\n\taddress = canonicalize_mac_address(address)\n\t(peripheral) ->\n\t\t(peripheral.address is address)\n\n# Returns true if <value> is an array\nis_array = (value) ->\n\tArray.isArray(value)\n\n# Returns a peripheral filter function with argument <peripheral> that returns true if all service IDs in <service_ids> are in the list of services that peripheral <peripheral> advertises\nadvertised_services_filter = (service_ids) ->\n\tif not is_array(service_ids)\n\t\tservice_ids = [service_ids]\n\tservice_uuids = service_ids.map(canonicalize_bluetooth_uuid)\n\t(peripheral) ->\n\t\tfor service_uuid in service_uuids\n\t\t\tif (not (service_uuid in peripheral.advertisement.service_uuids))\n\t\t\t\treturn false\n\t\ttrue\n\n# Returns a peripheral filter function with argument <peripheral> that returns true if the address of <peripheral> equals <name>\nname_filter = (name) ->\n\t(peripheral) ->\n\t\t(peripheral.advertisement.name is name)\n\n# The various filter types\nfilter_types =\n\taddress: address_filter\n\tname: name_filter\n\tservice: advertised_services_filter\n\tservices: advertised_services_filter\n\n# Returns a function with argument <value> that returns true if <value> is of type <type_string>, false otherwise\nis_of_type = (type_string) ->\n\t(value) ->\n\t\t(typeof(value) is type_string)\n\n# Returns true if the passed argument <value> is of type \"function\", false otherwise\nis_function_type = is_of_type('function')\n\n# Returns a filter function according to <options>. <options> must either be a function, in which case the function is simply returned, or an object like {\"name\":\"btleperipheral\", \"services\":[0x1827]}, with valid peripheral filter type ids as keys, and the parameter for that peripheral filter type as values.\ncreate_filter_function = (options) ->\n\tif is_function_type(options) then return options\n\tsub_filters = (filter_types[filter_type](filter_value) for filter_type, filter_value of options)\n\t(peripheral) ->\n\t\tfor sub_filter in sub_filters\n\t\t\tif (not sub_filter(peripheral))\n\t\t\t\treturn false\n\t\ttrue\n\n# Import/Require the \"noble\" module for Bluetooth LE communication\nnoble = require('noble')\n\n# Returns a promise that resolves is the state is noble is <noble_state_string>\nensure_noble_state = (noble_state_string) ->\n\tnew Promise (resolve, reject) ->\n\t\tif (noble.state is noble_state_string)\n\t\t\tresolve()\n\t\telse\n\t\t\tnoble.on 'stateChange', (state) ->\n\t\t\t\tif (state is noble_state_string)\n\t\t\t\t\tresolve()\n\t\t\t\treturn\n\t\treturn\n\n# Debug log function for events\ndebug_event = require('debug')('simble:event')\n\n# Import/Require the \"events\" module as EventEmitter\nEventEmitter = require('events')\n\n# The possible states a peripheral can have\nperipheral_states =\n\tdisconnected: 1\n\tconnected: 2\n\tdiscovered: 3\n\n# Convert a Buffer instance <buffer> to an array of byte integers\nbuffer_to_byte_array = (buffer) ->\n\t[buffer...]\n\n# Returns true if the passed argument <value> is neither null nor undefined\nis_valid_value = (value) ->\n\t((value isnt undefined) and (value isnt null))\n\n# Returns the first value in <values...> that is neither null nor undefined\nfirst_valid_value = (values...) ->\n\tfor value in values\n\t\tif is_valid_value(value)\n\t\t\treturn value\n\treturn\n\n# Converts integer value <integer> into a zero-prefixed hexadecimal string of length <number_of_digits>\ninteger_to_zero_prefixed_hex_string = (integer, number_of_digits) ->\n\t('0'.repeat(number_of_digits) + integer.toString(0x10)).slice(-number_of_digits)\n\n# Convert the byte array <byte_array> to a hexadecimal string. Every byte value is converted to a two-digit, zero padded hexadecimal string, prefixed with string <prefix_string> (default:\"\"), suffixed with string <suffix_string> (default:\"\"). All bytes are separated with string <separator_string> (default:\" \")\nbyte_array_to_hex_string = (byte_array, separator_string, prefix_string, suffix_string) ->\n\tseparator_string = first_valid_value(separator_string, ' ')\n\tprefix_string = first_valid_value(prefix_string, '')\n\tsuffix_string = first_valid_value(suffix_string, '')\n\t(\"#{prefix_string}#{integer_to_zero_prefixed_hex_string(byte, 2)}#{suffix_string}\" for byte in byte_array).join(separator_string)\n\n# Convert <value> to a Buffer instance\nconvert_to_buffer = (value) ->\n\tif not Buffer.isBuffer(value)\n\t\tvalue = Buffer.from(value)\n\tvalue\n\n# Debug log function for data that is being transferred\ndebug_data = require('debug')('simble:data')\n\n# This class represents a Bluetooth LE characteristic\nCharacteristic = class extends EventEmitter\n\tconstructor: (@noble_characteristic, @service) ->\n\t\tsuper()\n\t\t@uuid = canonicalize_bluetooth_uuid(@noble_characteristic.uuid)\n\t\t@noble_characteristic.on 'data', (data) =>\n\t\t\tdata = buffer_to_byte_array(data)\n\t\t\tdebug_data \"Characteristic #{@uuid} : Receive \\\"#{byte_array_to_hex_string(data, ' ')}\\\"\"\n\t\t\t@emit('data_received', data)\n\t\t\treturn\n\t\treturn\n\temit: (event_id) ->\n\t\tdebug_event \"Characteristic #{@uuid} : Event \\\"#{event_id}\\\"\"\n\t\tsuper arguments...\n\tread: ->\n\t\tnew Promise (resolve, reject) =>\n\t\t\t@noble_characteristic.read (error, data) =>\n\t\t\t\tif error\n\t\t\t\t\treject(error)\n\t\t\t\telse\n\t\t\t\t\tresolve(buffer_to_byte_array(data))\n\t\t\t\treturn\n\t\t\treturn\n\twrite: (data, without_response) ->\n\t\tdata = convert_to_buffer(data)\n\t\twithout_response = first_valid_value(without_response, false)\n\t\tdebug_data \"Characteristic #{@uuid} : Send \\\"#{byte_array_to_hex_string(data, ' ')}\\\"\"\n\t\tnew Promise (resolve, reject) =>\n\t\t\t@noble_characteristic.write data, without_response, (error) =>\n\t\t\t\tif error\n\t\t\t\t\treject(error)\n\t\t\t\telse\n\t\t\t\t\tresolve()\n\t\t\t\treturn\n\t\t\treturn\n\tsubscribe: (listener) ->\n\t\tnew Promise (resolve, reject) =>\n\t\t\t@noble_characteristic.subscribe (error) =>\n\t\t\t\tif error\n\t\t\t\t\treject(error)\n\t\t\t\telse\n\t\t\t\t\t@addListener('data_received', listener)\n\t\t\t\t\tresolve()\n\t\t\t\treturn\n\t\t\treturn\n\n# This class represents a Bluetooth LE service\nService = class extends EventEmitter\n\tconstructor: (@noble_service, @peripheral) ->\n\t\tsuper()\n\t\t@uuid = canonicalize_bluetooth_uuid(@noble_service.uuid)\n\t\t@update_characteristics()\n\t\treturn\n\temit: (event_id) ->\n\t\tdebug_event \"Service #{@uuid} : Event \\\"#{event_id}\\\"\"\n\t\tsuper arguments...\n\tupdate_characteristics: ->\n\t\t@characteristics = {}\n\t\tif @noble_service.characteristics\n\t\t\tfor noble_characteristic in @noble_service.characteristics\n\t\t\t\t@characteristics[canonicalize_bluetooth_uuid(noble_characteristic.uuid)] = new Characteristic(noble_characteristic, @)\n\t\treturn\n\tensure_discovered: ->\n\t\t@peripheral.ensure_discovered()\n\tget_discovered_characteristic: (characteristic_id) ->\n\t\t@characteristics[canonicalize_bluetooth_uuid(characteristic_id)]\n\tget_characteristic: (characteristic_id) ->\n\t\t@ensure_discovered()\n\t\t.then =>\n\t\t\t@get_discovered_characteristic(characteristic_id)\n\n# This class represents a Bluetooth LE peripheral\nPeripheral = class extends EventEmitter\n\t@states: peripheral_states\n\tconstructor: (@noble_peripheral) ->\n\t\tsuper()\n\t\t@address = canonicalize_mac_address(@noble_peripheral.address)\n\t\t@address_type = @noble_peripheral.addressType\n\t\t@advertisement =\n\t\t\tname: @noble_peripheral.advertisement.localName\n\t\t\tservice_uuids: @noble_peripheral.advertisement.serviceUuids.map(canonicalize_bluetooth_uuid)\n\t\t\tmanufacturer_data: @noble_peripheral.advertisement.manufacturerData\n\t\t@connectable = @noble_peripheral.connectable\n\t\t@rssi = @noble_peripheral.rssi\n\t\t# TODO is this safe? could noble_peripheral already be connected?\n\t\t@set_state(peripheral_states.disconnected)\n\t\t@update_services()\n\t\t@noble_peripheral.on 'connect', =>\n\t\t\t@set_state(peripheral_states.connected)\n\t\t\t@emit 'connected'\n\t\t\treturn\n\t\t@noble_peripheral.on 'disconnect', =>\n\t\t\t@set_state(peripheral_states.disconnected)\n\t\t\t@emit 'disconnected'\n\t\t\treturn\n\t\t@noble_peripheral.on 'rssiUpdate', (rssi) =>\n\t\t\t@rssi = rssi\n\t\t\t@emit 'rssi_update', rssi\n\t\t\treturn\n\t\treturn\n\temit: (event_id) ->\n\t\tdebug_event \"Peripheral #{@address} : Event \\\"#{event_id}\\\"\"\n\t\tsuper arguments...\n\tset_state: (state) ->\n\t\tif (state isnt @state)\n\t\t\t@state = state\n\t\t\t@is_connected = (state >= peripheral_states.connected)\n\t\t\t@is_discovered = (state >= peripheral_states.discovered)\n\t\treturn\n\tupdate_services: ->\n\t\t@services = {}\n\t\tif @noble_peripheral.services\n\t\t\tfor noble_service in @noble_peripheral.services\n\t\t\t\t@services[canonicalize_bluetooth_uuid(noble_service.uuid)] = new Service(noble_service, @)\n\t\treturn\n\tensure_disconnected: ->\n\t\tnew Promise (resolve, reject) =>\n\t\t\tif not @is_connected\n\t\t\t\tresolve()\n\t\t\telse\n\t\t\t\t@noble_peripheral.disconnect (error) =>\n\t\t\t\t\tif error\n\t\t\t\t\t\treject(error)\n\t\t\t\t\telse\n\t\t\t\t\t\tresolve()\n\t\t\t\t\treturn\n\t\t\treturn\n\t# Alias for ensure_disconnected()\n\tdisconnect: ->\n\t\t@ensure_disconnected()\n\tensure_connected: ->\n\t\tnew Promise (resolve, reject) =>\n\t\t\tif @is_connected\n\t\t\t\tresolve()\n\t\t\telse\n\t\t\t\t@noble_peripheral.connect (error) =>\n\t\t\t\t\tif error\n\t\t\t\t\t\treject(error)\n\t\t\t\t\telse\n\t\t\t\t\t\tresolve()\n\t\t\t\t\treturn\n\t\t\treturn\n\t# Alias for ensure_connected()\n\tconnect: ->\n\t\t@ensure_connected()\n\tensure_discovered: ->\n\t\t@ensure_connected()\n\t\t.then =>\n\t\t\tnew Promise (resolve, reject) =>\n\t\t\t\tif @is_discovered\n\t\t\t\t\tresolve()\n\t\t\t\telse\n\t\t\t\t\t@noble_peripheral.discoverAllServicesAndCharacteristics (error) =>\n\t\t\t\t\t\tif error\n\t\t\t\t\t\t\treject(error)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t@update_services()\n\t\t\t\t\t\t\t@set_state(peripheral_states.discovered)\n\t\t\t\t\t\t\t@emit 'discovered'\n\t\t\t\t\t\t\tresolve()\n\t\t\t\t\t\treturn\n\t\t\t\treturn\n\t# Alias for ensure_discovered()\n\tdiscover: ->\n\t\t@ensure_discovered()\n\tget_discovered_service: (service_id) ->\n\t\t@services[canonicalize_bluetooth_uuid(service_id)]\n\tget_service: (service_id) ->\n\t\t@ensure_discovered()\n\t\t.then =>\n\t\t\t@get_discovered_service(service_id)\n\tget_characteristic: (service_id, characteristic_id) ->\n\t\t@get_service(service_id)\n\t\t.then (service) ->\n\t\t\tservice.get_characteristic(characteristic_id)\n\n# Scan for a peripheral that matches the filter <peripheral_filter>. Returns a Promise that resolves to the peripheral if found\nscan_for_peripheral = (peripheral_filter) ->\n\tperipheral_filter = create_filter_function(peripheral_filter)\n\tensure_noble_state('poweredOn')\n\t.then ->\n\t\tnew Promise (resolve, reject) ->\n\t\t\tnoble.on 'discover', (noble_peripheral) ->\n\t\t\t\tperipheral = new Peripheral(noble_peripheral)\n\t\t\t\tif peripheral_filter(peripheral)\n\t\t\t\t\tnoble.stopScanning()\n\t\t\t\t\tresolve(peripheral)\n\t\t\t\treturn\n\t\t\tnoble.startScanning()\n\t\t\treturn\n\n# Stop scanning for peripherals. Returns a Promise that resolves if the scanning has stopped.\nstop_scanning = ->\n\tnew Promise (resolve, reject) ->\n\t\tnoble.once 'scanStop', ->\n\t\t\tresolve()\n\t\t\treturn\n\t\tnoble.stopScanning()\n\t\treturn\n\n# What this module exports\nmodule.exports =\n\tcanonicalize:\n\t\taddress: canonicalize_mac_address\n\t\tbluetooth_uuid: canonicalize_bluetooth_uuid\n\tfilter: filter_types\n\tscan_for_peripheral: scan_for_peripheral\n\tstop_scanning: stop_scanning\n"
  ]
}